// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for SiteStatusLabel.
const (
	SiteStatusLabelActive          SiteStatusLabel = "Active"
	SiteStatusLabelDecommissioning SiteStatusLabel = "Decommissioning"
	SiteStatusLabelPlanned         SiteStatusLabel = "Planned"
	SiteStatusLabelRetired         SiteStatusLabel = "Retired"
	SiteStatusLabelStaging         SiteStatusLabel = "Staging"
)

// Defines values for SiteStatusValue.
const (
	SiteStatusValueActive          SiteStatusValue = "active"
	SiteStatusValueDecommissioning SiteStatusValue = "decommissioning"
	SiteStatusValuePlanned         SiteStatusValue = "planned"
	SiteStatusValueRetired         SiteStatusValue = "retired"
	SiteStatusValueStaging         SiteStatusValue = "staging"
)

// Defines values for WritableSiteRequestStatus.
const (
	Active          WritableSiteRequestStatus = "active"
	Decommissioning WritableSiteRequestStatus = "decommissioning"
	Planned         WritableSiteRequestStatus = "planned"
	Retired         WritableSiteRequestStatus = "retired"
	Staging         WritableSiteRequestStatus = "staging"
)

// ASN Adds support for custom fields and tags.
type ASN struct {
	// Asn 16- or 32-bit autonomous system number
	Asn           int64                   `json:"asn"`
	Comments      *string                 `json:"comments,omitempty"`
	Created       *time.Time              `json:"created"`
	CustomFields  *map[string]interface{} `json:"custom_fields,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Display       *string                 `json:"display,omitempty"`
	DisplayUrl    *string                 `json:"display_url,omitempty"`
	Id            *int                    `json:"id,omitempty"`
	LastUpdated   *time.Time              `json:"last_updated"`
	ProviderCount *int64                  `json:"provider_count,omitempty"`
	Rir           *BriefRIR               `json:"rir"`
	SiteCount     *int64                  `json:"site_count,omitempty"`
	Tags          *[]NestedTag            `json:"tags,omitempty"`
	Tenant        *BriefTenant            `json:"tenant"`
	Url           *string                 `json:"url,omitempty"`
}

// BriefRIR Adds support for custom fields and tags.
type BriefRIR struct {
	AggregateCount *int64  `json:"aggregate_count,omitempty"`
	Description    *string `json:"description,omitempty"`
	Display        *string `json:"display,omitempty"`
	Id             *int    `json:"id,omitempty"`
	Name           string  `json:"name"`
	Slug           string  `json:"slug"`
	Url            *string `json:"url,omitempty"`
}

// BriefRegion Extends PrimaryModelSerializer to include MPTT support.
type BriefRegion struct {
	Depth       *int    `json:"_depth,omitempty"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	SiteCount   *int    `json:"site_count,omitempty"`
	Slug        string  `json:"slug"`
	Url         *string `json:"url,omitempty"`
}

// BriefRegionRequest Extends PrimaryModelSerializer to include MPTT support.
type BriefRegionRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
}

// BriefSiteGroup Extends PrimaryModelSerializer to include MPTT support.
type BriefSiteGroup struct {
	Depth       *int    `json:"_depth,omitempty"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	SiteCount   *int    `json:"site_count,omitempty"`
	Slug        string  `json:"slug"`
	Url         *string `json:"url,omitempty"`
}

// BriefSiteGroupRequest Extends PrimaryModelSerializer to include MPTT support.
type BriefSiteGroupRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
}

// BriefTenant Adds support for custom fields and tags.
type BriefTenant struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
	Url         *string `json:"url,omitempty"`
}

// BriefTenantRequest Adds support for custom fields and tags.
type BriefTenantRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
}

// ForeignID defines model for ForeignID.
type ForeignID = int

// NestedTag Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTag struct {
	Color      *string `json:"color,omitempty"`
	Display    *string `json:"display,omitempty"`
	DisplayUrl *string `json:"display_url,omitempty"`
	Id         *int    `json:"id,omitempty"`
	Name       string  `json:"name"`
	Slug       string  `json:"slug"`
	Url        *string `json:"url,omitempty"`
}

// NestedTagRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTagRequest struct {
	Color *string `json:"color,omitempty"`
	Name  string  `json:"name"`
	Slug  string  `json:"slug"`
}

// Site Adds support for custom fields and tags.
type Site struct {
	Asns         *[]ASN                  `json:"asns,omitempty"`
	CircuitCount *int64                  `json:"circuit_count,omitempty"`
	Comments     *string                 `json:"comments,omitempty"`
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	DeviceCount  *int64                  `json:"device_count,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	DisplayUrl   *string                 `json:"display_url,omitempty"`

	// Facility Local facility ID or description
	Facility    *string         `json:"facility,omitempty"`
	Group       *BriefSiteGroup `json:"group"`
	Id          *int            `json:"id,omitempty"`
	LastUpdated *time.Time      `json:"last_updated"`

	// Latitude GPS coordinate in decimal format (xx.yyyyyy)
	Latitude *float64 `json:"latitude"`

	// Longitude GPS coordinate in decimal format (xx.yyyyyy)
	Longitude *float64 `json:"longitude"`

	// Name Full name of the site
	Name string `json:"name"`

	// PhysicalAddress Physical location of the building
	PhysicalAddress *string      `json:"physical_address,omitempty"`
	PrefixCount     *int64       `json:"prefix_count,omitempty"`
	RackCount       *int64       `json:"rack_count,omitempty"`
	Region          *BriefRegion `json:"region"`

	// ShippingAddress If different from the physical address
	ShippingAddress *string `json:"shipping_address,omitempty"`
	Slug            string  `json:"slug"`
	Status          *struct {
		Label *SiteStatusLabel `json:"label,omitempty"`

		// Value * `planned` - Planned
		// * `staging` - Staging
		// * `active` - Active
		// * `decommissioning` - Decommissioning
		// * `retired` - Retired
		Value *SiteStatusValue `json:"value,omitempty"`
	} `json:"status,omitempty"`
	Tags                *[]NestedTag `json:"tags,omitempty"`
	Tenant              *BriefTenant `json:"tenant"`
	TimeZone            *string      `json:"time_zone"`
	Url                 *string      `json:"url,omitempty"`
	VirtualmachineCount *int64       `json:"virtualmachine_count,omitempty"`
	VlanCount           *int64       `json:"vlan_count,omitempty"`
}

// SiteStatusLabel defines model for Site.Status.Label.
type SiteStatusLabel string

// SiteStatusValue * `planned` - Planned
// * `staging` - Staging
// * `active` - Active
// * `decommissioning` - Decommissioning
// * `retired` - Retired
type SiteStatusValue string

// WritableSiteRequest Adds support for custom fields and tags.
type WritableSiteRequest struct {
	Asns         *[]int                  `json:"asns,omitempty"`
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// Facility Local facility ID or description
	Facility *string                    `json:"facility,omitempty"`
	Group    *WritableSiteRequest_Group `json:"group"`

	// Latitude GPS coordinate in decimal format (xx.yyyyyy)
	Latitude *float64 `json:"latitude"`

	// Longitude GPS coordinate in decimal format (xx.yyyyyy)
	Longitude *float64 `json:"longitude"`

	// Name Full name of the site
	Name string `json:"name"`

	// PhysicalAddress Physical location of the building
	PhysicalAddress *string                     `json:"physical_address,omitempty"`
	Region          *WritableSiteRequest_Region `json:"region"`

	// ShippingAddress If different from the physical address
	ShippingAddress *string `json:"shipping_address,omitempty"`
	Slug            string  `json:"slug"`

	// Status * `planned` - Planned
	// * `staging` - Staging
	// * `active` - Active
	// * `decommissioning` - Decommissioning
	// * `retired` - Retired
	Status   *WritableSiteRequestStatus  `json:"status,omitempty"`
	Tags     *[]NestedTagRequest         `json:"tags,omitempty"`
	Tenant   *WritableSiteRequest_Tenant `json:"tenant"`
	TimeZone *string                     `json:"time_zone"`
}

// WritableSiteRequestGroup1 Extends PrimaryModelSerializer to include MPTT support.
type WritableSiteRequestGroup1 = BriefSiteGroupRequest

// WritableSiteRequest_Group defines model for WritableSiteRequest.Group.
type WritableSiteRequest_Group struct {
	union json.RawMessage
}

// WritableSiteRequestRegion1 Extends PrimaryModelSerializer to include MPTT support.
type WritableSiteRequestRegion1 = BriefRegionRequest

// WritableSiteRequest_Region defines model for WritableSiteRequest.Region.
type WritableSiteRequest_Region struct {
	union json.RawMessage
}

// WritableSiteRequestStatus * `planned` - Planned
// * `staging` - Staging
// * `active` - Active
// * `decommissioning` - Decommissioning
// * `retired` - Retired
type WritableSiteRequestStatus string

// WritableSiteRequestTenant1 Adds support for custom fields and tags.
type WritableSiteRequestTenant1 = BriefTenantRequest

// WritableSiteRequest_Tenant defines model for WritableSiteRequest.Tenant.
type WritableSiteRequest_Tenant struct {
	union json.RawMessage
}

// DcimSitesCreateJSONRequestBody defines body for DcimSitesCreate for application/json ContentType.
type DcimSitesCreateJSONRequestBody = WritableSiteRequest

// DcimSitesCreateMultipartRequestBody defines body for DcimSitesCreate for multipart/form-data ContentType.
type DcimSitesCreateMultipartRequestBody = WritableSiteRequest

// AsForeignID returns the union data inside the WritableSiteRequest_Group as a ForeignID
func (t WritableSiteRequest_Group) AsForeignID() (ForeignID, error) {
	var body ForeignID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForeignID overwrites any union data inside the WritableSiteRequest_Group as the provided ForeignID
func (t *WritableSiteRequest_Group) FromForeignID(v ForeignID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForeignID performs a merge with any union data inside the WritableSiteRequest_Group, using the provided ForeignID
func (t *WritableSiteRequest_Group) MergeForeignID(v ForeignID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableSiteRequestGroup1 returns the union data inside the WritableSiteRequest_Group as a WritableSiteRequestGroup1
func (t WritableSiteRequest_Group) AsWritableSiteRequestGroup1() (WritableSiteRequestGroup1, error) {
	var body WritableSiteRequestGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableSiteRequestGroup1 overwrites any union data inside the WritableSiteRequest_Group as the provided WritableSiteRequestGroup1
func (t *WritableSiteRequest_Group) FromWritableSiteRequestGroup1(v WritableSiteRequestGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableSiteRequestGroup1 performs a merge with any union data inside the WritableSiteRequest_Group, using the provided WritableSiteRequestGroup1
func (t *WritableSiteRequest_Group) MergeWritableSiteRequestGroup1(v WritableSiteRequestGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableSiteRequest_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableSiteRequest_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForeignID returns the union data inside the WritableSiteRequest_Region as a ForeignID
func (t WritableSiteRequest_Region) AsForeignID() (ForeignID, error) {
	var body ForeignID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForeignID overwrites any union data inside the WritableSiteRequest_Region as the provided ForeignID
func (t *WritableSiteRequest_Region) FromForeignID(v ForeignID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForeignID performs a merge with any union data inside the WritableSiteRequest_Region, using the provided ForeignID
func (t *WritableSiteRequest_Region) MergeForeignID(v ForeignID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableSiteRequestRegion1 returns the union data inside the WritableSiteRequest_Region as a WritableSiteRequestRegion1
func (t WritableSiteRequest_Region) AsWritableSiteRequestRegion1() (WritableSiteRequestRegion1, error) {
	var body WritableSiteRequestRegion1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableSiteRequestRegion1 overwrites any union data inside the WritableSiteRequest_Region as the provided WritableSiteRequestRegion1
func (t *WritableSiteRequest_Region) FromWritableSiteRequestRegion1(v WritableSiteRequestRegion1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableSiteRequestRegion1 performs a merge with any union data inside the WritableSiteRequest_Region, using the provided WritableSiteRequestRegion1
func (t *WritableSiteRequest_Region) MergeWritableSiteRequestRegion1(v WritableSiteRequestRegion1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableSiteRequest_Region) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableSiteRequest_Region) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForeignID returns the union data inside the WritableSiteRequest_Tenant as a ForeignID
func (t WritableSiteRequest_Tenant) AsForeignID() (ForeignID, error) {
	var body ForeignID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForeignID overwrites any union data inside the WritableSiteRequest_Tenant as the provided ForeignID
func (t *WritableSiteRequest_Tenant) FromForeignID(v ForeignID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForeignID performs a merge with any union data inside the WritableSiteRequest_Tenant, using the provided ForeignID
func (t *WritableSiteRequest_Tenant) MergeForeignID(v ForeignID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableSiteRequestTenant1 returns the union data inside the WritableSiteRequest_Tenant as a WritableSiteRequestTenant1
func (t WritableSiteRequest_Tenant) AsWritableSiteRequestTenant1() (WritableSiteRequestTenant1, error) {
	var body WritableSiteRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableSiteRequestTenant1 overwrites any union data inside the WritableSiteRequest_Tenant as the provided WritableSiteRequestTenant1
func (t *WritableSiteRequest_Tenant) FromWritableSiteRequestTenant1(v WritableSiteRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableSiteRequestTenant1 performs a merge with any union data inside the WritableSiteRequest_Tenant, using the provided WritableSiteRequestTenant1
func (t *WritableSiteRequest_Tenant) MergeWritableSiteRequestTenant1(v WritableSiteRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableSiteRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableSiteRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DcimSitesCreateWithBody request with any body
	DcimSitesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DcimSitesCreate(ctx context.Context, body DcimSitesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DcimSitesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDcimSitesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DcimSitesCreate(ctx context.Context, body DcimSitesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDcimSitesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDcimSitesCreateRequest calls the generic DcimSitesCreate builder with application/json body
func NewDcimSitesCreateRequest(server string, body DcimSitesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDcimSitesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDcimSitesCreateRequestWithBody generates requests for DcimSitesCreate with any type of body
func NewDcimSitesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dcim/sites/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DcimSitesCreateWithBodyWithResponse request with any body
	DcimSitesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DcimSitesCreateResponse, error)

	DcimSitesCreateWithResponse(ctx context.Context, body DcimSitesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DcimSitesCreateResponse, error)
}

type DcimSitesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Site
}

// Status returns HTTPResponse.Status
func (r DcimSitesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DcimSitesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DcimSitesCreateWithBodyWithResponse request with arbitrary body returning *DcimSitesCreateResponse
func (c *ClientWithResponses) DcimSitesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DcimSitesCreateResponse, error) {
	rsp, err := c.DcimSitesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDcimSitesCreateResponse(rsp)
}

func (c *ClientWithResponses) DcimSitesCreateWithResponse(ctx context.Context, body DcimSitesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DcimSitesCreateResponse, error) {
	rsp, err := c.DcimSitesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDcimSitesCreateResponse(rsp)
}

// ParseDcimSitesCreateResponse parses an HTTP response from a DcimSitesCreateWithResponse call
func ParseDcimSitesCreateResponse(rsp *http.Response) (*DcimSitesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DcimSitesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
